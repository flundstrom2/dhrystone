/****************** "DHRYSTONE" Benchmark Program ***************************/
/*  File:       dhrystone.h
 *  Author:     Reinhold P. Weicker
 *              Siemens Nixdorf, Paderborn/Germany
 *              weicker@specbench.org
 *  Date:       May 25, 1988
 *  Modified:	Steven Pemberton, CWI, Amsterdam; Steven.Pemberton@cwi.nl
 *  Date:       October, 1993; March 1995
 *              Included both files into one source, that gets compiled
 *              in two passes. Made program auto-compiling, and auto-running,
 *              and generally made it much easier to use.
 *
 *              Original Version (in Ada) published in
 *              "Communications of the ACM" vol. 27., no. 10 (Oct. 1984),
 *              pp. 1013 - 1030, together with the statistics
 *              on which the distribution of statements etc. is based.
 *
 *              In this C version, the following C library functions are used:
 *              - strcpy, strcmp (inside the measurement loop)
 *              - printf, scanf (outside the measurement loop)
 *              In addition, Berkeley UNIX system calls "times ()" or "time ()"
 *              are used for execution time measurement. For measurements
 *              on other systems, these calls have to be changed.
 *
 *  Collection of Results:
 *              Reinhold Weicker (address see above) and
 *
 *              Rick Richardson
 *              PC Research. Inc.
 *              94 Apple Orchard Drive
 *              Tinton Falls, NJ 07724
 *                      Phone:  (201) 389-8963 (9-17 EST)
 *                      Usenet: ...!uunet!pcrat!rick
 *
 *      Please send results to Rick Richardson and/or Reinhold Weicker.
 *      Complete information should be given on hardware and software used.
 *      Hardware information includes: Machine type, CPU, type and size
 *      of caches; for microprocessors: clock frequency, memory speed
 *      (number of wait states).
 *      Software information includes: Compiler (and runtime library)
 *      manufacturer and version, compilation switches, OS version.
 *      The Operating System version may give an indication about the compiler;
 *      Dhrystone itself performs no OS calls in the measurement loop.
 *
 *      The complete output generated by the program should be mailed
 *      such that at least some checks for correctness can be made.
 *
 ***************************************************************************
 *
 * Defines:     The following "Defines" are possible:
 *      -DREG          (default: Not defined)
 *              As an approximation to what an average C programmer
 *              might do, causes the "register" storage class to be applied
 *              - for local variables, if they are used (dynamically)
 *                five or more times
 *              - for parameters if they are used (dynamically)
 *                six or more times
 *              Note that an optimal "register" strategy is
 *              compiler-dependent, and that "register" declarations
 *              do not necessarily lead to faster execution.
 *      -DTIMES                 (default)
 *      -DTIME
 *              The "times" function of UNIX (returning process times)
 *              or the "time" function (returning wallclock time)
 *              is used for measurement.
 *              For single user machines, "time ()" is adequate. For
 *              multi-user machines where you cannot get single-user
 *              access, use the "times ()" function. If you have
 *              neither, use a stopwatch in the dead of night.
 *              "printf"s are provided marking the points "Start Timer"
 *              and "Stop Timer". DO NOT use the UNIX "time(1)"
 *              command, as this will measure the total time to
 *              run this program, which will (erroneously) include
 *              the time to allocate storage (malloc) and to perform
 *              the initialization.
 *      -DHZ=nnn
 *              In Berkeley UNIX, the function "times" returns process
 *              time in 1/HZ seconds, with HZ = 60 for most systems.
 *              CHECK YOUR SYSTEM DESCRIPTION BEFORE YOU JUST APPLY
 *              A VALUE.
 *      -DDOPTIMIZE=n
 *              Indicates that the program was compiled with -On
 *      -DINTTYPE=n
 *              Size of int; 16, 32 or 64, using intn_t.
 *              If negative, the corresponding int_fastn_t is used.
 *
 ***************************************************************************
 *
 *  History:	Version C/2.1 was made for two reasons:
 *
 *	1) There was an obvious need for a common C version of
 *      Dhrystone, since C is at present the most popular system
 *      programming language for the class of processors
 *      (microcomputers, minicomputers) where Dhrystone is used most.
 *      There should be, as far as possible, only one C version of
 *      Dhrystone such that results can be compared without
 *      restrictions. In the past, the C versions distributed
 *      by Rick Richardson (Version 1.1) and by Reinhold Weicker
 *      had small (though not significant) differences.
 *
 *      2) As far as it is possible without changes to the Dhrystone
 *      statistics, optimizing compilers should be prevented from
 *      removing significant statements.
 *
 *      This C version has been developed in cooperation with
 *      Rick Richardson (Tinton Falls, NJ), it incorporates many
 *      ideas from the "Version 1.1" distributed previously by
 *      him over the UNIX network Usenet.
 *      I also thank Chaim Benedelac (National Semiconductor),
 *      David Ditzel (SUN), Earl Killian and John Mashey (MIPS),
 *      Alan Smith and Rafael Saavedra-Barrera (UC at Berkeley)
 *      for their help with comments on earlier versions of the
 *      benchmark.
 *
 *  Changes:    In the initialization part, this version follows mostly
 *      Rick Richardson's version distributed via Usenet, not the
 *      version distributed earlier via floppy disk by Reinhold Weicker.
 *      As a concession to older compilers, names have been made
 *      unique within the first 8 characters.
 *      Inside the measurement loop, this version follows the
 *      version previously distributed by Reinhold Weicker.
 *
 *      At several places in the benchmark, code has been added,
 *      but within the measurement loop only in branches that
 *      are not executed. The intention is that optimizing compilers
 *      should be prevented from moving code out of the measurement
 *      loop, or from removing code altogether. Since the statements
 *      that are executed within the measurement loop have NOT been
 *      changed, the numbers defining the "Dhrystone distribution"
 *      (distribution of statements, operand types and locality)
 *      still hold. Except for sophisticated optimizing compilers,
 *      execution times for this version should be the same as
 *      for previous versions.
 *
 *      Since it has proven difficult to subtract the time for the
 *      measurement loop overhead in a correct way, the loop check
 *      has been made a part of the benchmark. This does have
 *      an impact - though a very minor one - on the distribution
 *      statistics which have been updated for this version.
 *
 *      All changes within the measurement loop are described
 *      and discussed in the companion paper "Rationale for
 *      Dhrystone version 2".
 *
 *      Because of the self-imposed limitation that the order and
 *      distribution of the executed statements should not be
 *      changed, there are still cases where optimizing compilers
 *      may not generate code for some statements. To a certain
 *      degree, this is unavoidable for small synthetic benchmarks.
 *      Users of the benchmark are advised to check code listings
 *      whether code is generated for all statements of Dhrystone.
 *
 *      Version 2.1 is identical to version 2.0 distributed via
 *      the UNIX network Usenet in March 1988 except that it corrects
 *      some minor deficiencies that were found by users of version 2.0.
 *      The only change within the measurement loop is that a
 *      non-executed "else" part was added to the "if" statement in
 *      Func_3, and a non-executed "else" part removed from Proc_3.
 *
 * Version C/2.2, Steven Pemberton, October 1993
 *	Functionally, identical to version 2.1; the changes are in
 *	how you compile and use it:
 *	- Everything is in one file now, but compiled in 2 passes
 *	- Compile (and run) by running the file through the shell: 'sh dhry.c"
 *	- Uses the system definition of HZ if one can be found
 *	- HZ must be defined, otherwise it won't compile (no defaults here)
 *	- The (uninteresting) output is printed to stderr (dhry2 > /dev/null)
 *	- The number of loops is passed as a parameter, rather than read
 *	  (dhry2 500000)
 *	- If the number of loops is insufficient to get a good result,
 *	  it repeats it with loops*10 until it is enough (rather than just
 *	  stopping)
 *	- Output says which sort of clock it is using, and the HZ value
 *	- You can use -DREG instead of the -DREG=register of previous versions
 *	- Some stylistic cleanups.
 *
 * Version C99/2.3, Fredrik Lundström, May 2017
 *	Functionally, identical to version 2.2; the changes are to match
 *	the development of compilers and computers during the last 25 years.
 *	 - Modified to use C99: Uses stdint and stdbool types,
 *	   removed -DNOSTRUCTASSIGN and -DNOENUMS.
 *	 - Added #pragmas, __dedecl and __attribute__ to prevent function inlining
 *	 - Corrected bug in 2.2: Global variables weren't reset
 *	   when a larger loop had to be tried.
 *	 - Removed output of µs/dhrystone
 *	 - Added -DOPTIMIZE flag to indicate in output how it was compiled
 *	 - Added -DINTTYPE flag to define if int16_t, int32_t, int64_t,
 *	   int_fast16_t, int_fast32_t or int_fast64_t is to be used.
 *	 - Uninteresting output is only printed if NDEBUG is defined.
 *	   Otherwize, assert() is used to verify the algorithm's expected
 *	   results.
 *   - Re-split the file into several files again; This to simplify
 *     comparasion that the algorithm itself hasen't changes as I
 *     added code to allow Dhrystone to be run on embedded targets and
 *     handle how different targets configure the MCU, compiler differcies
 *     etc.
 *
 ***************************************************************************
 *
 *  Compilation model and measurement (IMPORTANT):
 *
 *  The following "ground rules" apply for measurements:
 *  - Separate compilation
 *  - No procedure merging
 *  - Otherwise, compiler optimizations are allowed but should be indicated
 *  - Default results are those without register declarations
 *  See the companion paper "Rationale for Dhrystone Version 2" for a more
 *  detailed discussion of these ground rules.
 *
 *  For 16-Bit processors (e.g. 80186, 80286), times for all compilation
 *  models ("small", "medium", "large" etc.) should be given if possible,
 *  together with a definition of these models for the compiler system used.
 *
 **************************************************************************
 *
 *  Dhrystone (C version) statistics:
 *
 *  [Comment from the first distribution, updated for version 2.
 *   Note that because of language differences, the numbers are slightly
 *   different from the Ada version.]
 *
 *  The following program contains statements of a high level programming
 *  language (here: C) in a distribution considered representative:
 *
 *    assignments                  52 (51.0 %)
 *    control statements           33 (32.4 %)
 *    procedure, function calls    17 (16.7 %)
 *
 *  103 statements are dynamically executed. The program is balanced with
 *  respect to the three aspects:
 *
 *    - statement type
 *    - operand type
 *    - operand locality
 *         operand global, local, parameter, or constant.
 *
 *  The combination of these three aspects is balanced only approximately.
 *
 *  1. Statement Type:
 *  -----------------             number
 *
 *     V1 = V2                     9
 *       (incl. V1 = F(..)
 *     V = Constant               12
 *     Assignment,                 7
 *       with array element
 *     Assignment,                 6
 *       with record component
 *                                --
 *                                34       34
 *
 *     X = Y +|-|"&&"|"|" Z        5
 *     X = Y +|-|"==" Constant     6
 *     X = X +|- 1                 3
 *     X = Y *|/ Z                 2
 *     X = Expression,             1
 *           two operators
 *     X = Expression,             1
 *           three operators
 *                                --
 *                                18       18
 *
 *     if ....                    14
 *       with "else"      7
 *       without "else"   7
 *           executed        3
 *           not executed    4
 *     for ...                     7  |  counted every time
 *     while ...                   4  |  the loop condition
 *     do ... while                1  |  is evaluated
 *     switch ...                  1
 *     break                       1
 *     declaration with            1
 *       initialization
 *                                --
 *                                34       34
 *
 *     P (...)  procedure call    11
 *       user procedure      10
 *       library procedure    1
 *     X = F (...)
 *             function  call      6
 *       user function        5
 *       library function     1
 *                                --
 *                                17       17
 *                                        ---
 *                                        103
 *
 *    The average number of parameters in procedure or function calls
 *    is 1.82 (not counting the function values aX *
 *
 *  2. Operators
 *  ------------
 *                          number    approximate
 *                                    percentage
 *
 *    Arithmetic             32          50.8
 *
 *       +                     21          33.3
 *       -                      7          11.1
 *       *                      3           4.8
 *       / (int div)            1           1.6
 *
 *    Comparison             27           42.8
 *
 *       ==                     9           14.3
 *       /=                     4            6.3
 *       >                      1            1.6
 *       <                      3            4.8
 *       >=                     1            1.6
 *       <=                     9           14.3
 *
 *    Logic                   4            6.3
 *
 *       && (AND-THEN)          1            1.6
 *       |  (OR)                1            1.6
 *       !  (NOT)               2            3.2
 *
 *                           --          -----
 *                           63          100.1
 *
 *
 *  3. Operand Type (counted once per operand reference):
 *  ---------------
 *                          number    approximate
 *                                    percentage
 *
 *     Integer               175        72.3 %
 *     Character              45        18.6 %
 *     Pointer                12         5.0 %
 *     String30                6         2.5 %
 *     Array                   2         0.8 %
 *     Record                  2         0.8 %
 *                           ---       -------
 *                           242       100.0 %
 *
 *  When there is an access path leading to the final operand (e.g. a record
 *  component), only the final data type on the access path is counted.
 *
 *
 *  4. Operand Locality:
 *  -------------------
 *                                number    approximate
 *                                          percentage
 *
 *     local variable              114        47.1 %
 *     global variable              22         9.1 %
 *     parameter                    45        18.6 %
 *        value                        23         9.5 %
 *        reference                    22         9.1 %
 *     function result               6         2.5 %
 *     constant                     55        22.7 %
 *                                 ---       -------
 *                                 242       100.0 %
 *
 *  The program does not compute anything meaningful, but it is syntactically
 *  and semantically correct. All variables have a value assigned to them
 *  before they are used as a source operand.
 *
 *  There has been no explicit effort to account for the effects of a
 *  cache, or to balance the use of long or short displacements for code or
 *  data.
 *
 ***************************************************************************
 */

#ifndef __DHRY_DHRYSTONE_H
#define __DHRY_DHRYSTONE_H

#define Version "C99, Version 2.3"

#include <stdbool.h> // For bool
#include <stdint.h>  // For xintx_y



//* Compiler and system dependent definitions: */
#if __STDC_VERSION__ < 199901L
  #error This version of dhystone is designed for a C99-compliant compiler!
#elif __IAR_SYSTEMS_ICC__              // Compiler from IAR
  #define __DHRY_EMBEDDED
  #define __DHRY_COMPILER_IAR
  #define __DHRY_FRONTEND_EDG          // I don't know if this is true for all versions of IAR's compiler
#elif __ARMCC_VERSION >= 60000000L     // Keil CLANG/LLVM 6 and later, possibly other manufacturers as well.
  #define __DHRY_EMBEDDED
  #define __DHRY_COMPILER_KEIL
  #define __DHRY_FRONTEND_LLVM
#elif __ARMCC_VERSION >= 4010000L      // Keil 4.1 ARM Edison Design group and later
  #define __DHRY_EMBEDDED
  #define __DHRY_COMPILER_KEIL
  #define __DHRY_FRONTEND_EDG
  #define __DHRY_TIMER_SYSTICK         // At least on a ST Nucleo-STM32L073RZ board with Microlib.
  #define __DHRY_NO_STATIC_ASSERT
#elif defined(__EDG_VERSION)           // Other unknown Edison Design Group compiler frontend.
                                       // Some customers that have used the EDG frontend for some version(s) of their
                                       // compiler includes (from http://www.edg.com/customers ):
                                       // Green Hills        (professional embedded compiler)
                                       // IAR                (professional embedded compiler)
                                       // Intel              (Intel C++)
                                       // Mentor Graphics    (professional embedded compiler)
                                       // Microsoft          (Some versions of Visual C/C++)
                                       // Portland Group     (STMicroelectronics 2000-2013, NVIDIA from 2013)
                                       // Reasoning          (professional embedded compiler)
                                       // Tasking            (professional embedded compiler)
                                       // Windriver          (professional embedded compiler)
  #define __DHRY_FRONTEND_EDG
#elif defined(__clang__)               // Non-Keil LLVM/CLang, if existing
  #define __DHRY_FRONTEND_LLVM
#elif defined(__GNUC__)                // GCC or GCC-compatible frontends
  #define __DHRY_COMPILER_GCC
  #define __DHRY_FRONTEND_GCC
  #define __DHRY_PRAGMA_NOINLINE
  #define __DHRY_PRAGMA_NO_INLINE

  // Do what we can to ensure
  // functions aren't inlined and
  // prevent the compiler from
  // being too smart during
  // optimizations.
  #define MSVC_NOINLINE __declspec(noinline)
  #define GCC_NOINLINE __attribute__ ((noinline))
  #define GCC_PREVENT_INLINE() __asm__ ("")

  #define ATTRIBUTES_DECLARATOR GCC_NOINLINE
  #define PREVENT_INLINE() GCC_PREVENT_INLINE()

  // Probably not required on GCC
  #define STORAGE_CLASS_DECLARATOR MSVC_NOINLINE
  #define STORAGE_CLASS MSVC_NOINLINE
#elif defined(__VERSION__)             // Possibly other CLang-based compilers
  #define __DHRY_FRONTEND_LLVM
#else                                  // Other unkown compiler
  #define __DHRY_COMPILER_OTHER
  #define __DHRY_FRONTEND_OTHER
#endif


#ifdef __DHRY_NO_STATIC_ASSERT
  #include <assert.h>  // For assert() when _Static_assert() isn't supported
  static void _Static_assert(int a, const char  *b) {assert(a);}
#endif

#ifdef __DHRY_EMBEDDED
  // Remember: When compiled with 32-bit integers, the MCU must have
  // at least 6 kB of RAM, out of which at least 5kB needs to be continous!
  // The dhrystone test can - by definition - not be modified to require less RAM.
  
  #define __DRHY_FPRINTF  printf(y)
#endif

//#if defined(__DHRY_EMBEDDED) && !defined(HZ)
  // ... obviously
//#endif

/* variables for time measurement: */
/* Measurements should last at least about 2 seconds if timer resolution is better than 1ms */

#ifdef TIME                            // Worst accuracy, uses time()
  #define CLOCK_TYPE      "time()"
  #include <time.h>
  #define HZ              1
  typedef time_t          TIME;
  #define Too_Small_Time  22           // Measurements should last at least 22 seconds to get a statistic accuracy
  #define Start_Timer()   do { Begin_Time = time (NULL); } while(0)
  #define Stop_Timer()    do { End_Time   = time (NULL); } while(0)

#elif defined(MSC_CLOCK)               // Use Microsoft C hi-res clock
  #define CLOCK_TYPE      "MSC clock()"
  #include <time.h>
  #define HZ	          CLOCKS_PER_SEC
  typedef clock_t         TIME;
  extern clock_t	      clock(void);
  #define Too_Small_Time  (2L*HZ)
  #define Start_Timer()   do { Begin_Time = clock(); } while(0)
  #define Stop_Timer()    do { End_Time   = clock(); } while(0)

#elif defined(__DHRY_OLD_POSIX_TIME)   // Just kept this one as a reference...
                /* Use times(2) time function unless    */
                /* explicitly defined otherwise         */
  #define CLOCK_TYPE      "times()"
  #include <sys/types.h>
  #include <sys/times.h>

  #ifndef HZ	/* Added by SP 900619 */
    #include <sys/param.h>             // If your system doesn't have this, use -DHZ=xxx
  #else // not HZ
    #error *** You must define HZ!!! ***
  #endif /* not HZ*/

  typedef clock_t         TIME;
  static struct tms       time_info;

  #define Too_Small_Time  (2*HZ)
  #define Start_Timer()   do { times(&time_info); Begin_Time=time_info.tms_utime; } while(0)
  #define Stop_Timer()    do { times(&time_info); End_Time = time_info.tms_utime; } while(0)

#elif defined(__DHRY_TIMER_SYSTICK)
  #define CLOCK_TYPE      "SYSTICK"
  #define HZ              1000
  typedef uint32_t        TIME;
  #define Too_Small_Time  (2L*HZ)
  #define Start_Timer()   do { Begin_Time = SysTick_GetMS(); } while(0)
  #define Stop_Timer()    do { End_Time   = SysTick_GetMS(); } while(0)
  extern uint32_t SysTick_GetMS(void);
#else                                  // The proper C99-way.
  #define CLOCK_TYPE      "clock()"
  #include <time.h>
  #define HZ	          CLOCKS_PER_SEC
  typedef clock_t         TIME;
  #define Too_Small_Time  (2L*HZ)
  #define Start_Timer()   do { Begin_Time = clock(); } while(0)
  #define Stop_Timer()    do { End_Time   = clock(); } while(0)
#endif






#ifndef INTTYPE
  // Use compiler and platform defaults - normally 32 bit integers
  typedef int INT;
  #define MAX_INT INT_MAX
  #define INTTYPENAME "int"
#elif (INTTYPE==16)
  typedef int16_t INT;
  #define MAX_INT INT16_MAX
  #define INTTYPENAME "int16_t"
#elif (INTTYPE==32)
  typedef int32_t INT;
  #define MAX_INT INT32_MAX
  #define INTTYPENAME "int32_t"
#elif (INTTYPE==64)
  typedef int64_t INT;
  #define MAX_INT INT64_MAX
  #define INTTYPENAME "int64_t"
#elif (INTTYPE==-16)
  typedef int_fast16_t INT;
  #define MAX_INT INT_FAST16_MAX
  #define INTTYPENAME "int_fast16_t"
#elif (INTTYPE==-32)
  typedef int_fast32_t INT;
  #define MAX_INT INT_FAST32_MAX
  #define INTTYPENAME "int_fast32_t"
#elif (INTTYPE==-64)
  typedef int_fast64_t INT;
  #define MAX_INT INT_FAST64_MAX
#define INTTYPENAME "int_fast64_t"
#else
#error Invalid INTTYPE
#endif

#ifndef STORAGE_CLASS_DECLARATOR
  #define STORAGE_CLASS_DECLARATOR
#endif
#ifndef ATTRIBUTES_DECLARATOR
  #define ATTRIBUTES_DECLARATOR
#endif
#ifndef POST_RET_DECLARATOR
  #define POST_RET_DECLARATOR
#endif
#ifndef STORAGE_CLASS
  #define STORAGE_CLASS
#endif
#ifndef ATTRIBUTES
  #define ATTRIBUTES
#endif
#ifndef POST_RET
  #define POST_RET
#endif
#ifndef PREVENT_INLINE
  #define PREVENT_INLINE()
#endif
#ifdef __DHRY_PRAGMA_NO_INLINE
#pragma no_inline
#endif
#ifdef __DHRY_PRAGMA_NOINLINE
  #pragma noinline
#endif









/* General definitions: */

#define structassign(d, s)      d = s

#define Mic_secs_Per_Second     1000000.0
#define NUMBER_OF_RUNS		300 /* Default number of runs */

typedef char    CHAR;
typedef enum    {Ident_1, Ident_2, Ident_3, Ident_4, Ident_5}
                Enumeration;
typedef INT     One_Thirty;
typedef INT     One_Fifty;
typedef CHAR    Capital_Letter;
typedef char    Str_30 [31];
typedef INT     Arr_1_Dim [50];
typedef INT     Arr_2_Dim [50] [50];

#ifndef REG
  #define REG
        /* REG becomes defined as empty */
        /* i.e. no register variables   */
  static bool   Reg = false;
#else
#undef REG
  #define REG   register
  static bool   Reg = true;
#endif // not REG


typedef struct record
    {
    struct record *Ptr_Comp;
    Enumeration    Discr;
    union {
          struct {
                  Enumeration Enum_Comp;
                  INT         Int_Comp;
                  char        Str_Comp [31];
                  } var_1;
          struct {
                  Enumeration E_Comp_2;
                  char        Str_2_Comp [31];
                  } var_2;
          struct {
                  CHAR        Ch_1_Comp;
                  CHAR        Ch_2_Comp;
                  } var_3;
          } variant;
      } Rec_Type, *Rec_Pointer;










        // forward declarations
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_5 (void)                            ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_4 (void)                            ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR bool POST_RET_DECLARATOR Func_2 (const Str_30    Str_1_Par_Ref,
                                                          const Str_30    Str_2_Par_Ref)   ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_7 (One_Fifty       Int_1_Par_Val,
                                                          One_Fifty       Int_2_Par_Val,
                                                          One_Fifty      *Int_Par_Ref)     ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_8 (Arr_1_Dim       Arr_1_Par_Ref,
                                                          Arr_2_Dim       Arr_2_Par_Ref,
                                                          INT             Int_1_Par_Val,
                                                          INT             Int_2_Par_Val)   ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR Enumeration POST_RET_DECLARATOR Func_1 (Capital_Letter   Ch_1_Par_Val,
                                                                 Capital_Letter   Ch_2_Par_Val) ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_3 (Rec_Pointer    *Ptr_Ref_Par)     ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_6 (Enumeration     Enum_Val_Par,
                                                          Enumeration    *Enum_Ref_Par)    ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Dhrystone(INT           number_Of_Runs)  ATTRIBUTES_DECLARATOR;

STORAGE_CLASS_DECLARATOR Enumeration POST_RET_DECLARATOR Func_1 (Capital_Letter   Ch_1_Par_Val,
                                                                 Capital_Letter   Ch_2_Par_Val) ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR bool POST_RET_DECLARATOR Func_2 (const Str_30    Str_1_Par_Ref,
                                                          const Str_30    Str_2_Par_Ref)   ATTRIBUTES_DECLARATOR;

STORAGE_CLASS_DECLARATOR bool POST_RET_DECLARATOR Func_3 (Enumeration     Enum_Par_Val)    ATTRIBUTES_DECLARATOR;
// Pass 1 forward declarations
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_2 (One_Fifty      *Int_Par_Ref)     ATTRIBUTES_DECLARATOR;
STORAGE_CLASS_DECLARATOR void POST_RET_DECLARATOR Proc_1 (REG Rec_Pointer Ptr_Val_Par)     ATTRIBUTES_DECLARATOR;
void verify_result(REG INT         Number_Of_Runs,
                   One_Fifty       Int_1_Loc,
               REG One_Fifty       Int_2_Loc,
                   One_Fifty       Int_3_Loc,
                   Enumeration     Enum_Loc,
                   Str_30          Str_1_Loc,
                   Str_30          Str_2_Loc);






extern Rec_Pointer     Ptr_Glob,
                       Next_Ptr_Glob;
extern INT             Int_Glob;
extern bool            Bool_Glob;
extern CHAR            Ch_1_Glob,
                       Ch_2_Glob;
extern INT             Arr_1_Glob [50];
extern INT             Arr_2_Glob [50] [50];

extern bool            Done;

/* start of variables for time measurement */
extern TIME            Begin_Time,
                       End_Time,
                       User_Time;
extern float           Microseconds,
                       Dhrystones_Per_Second;



#ifdef  NOSTRUCTASSIGN
inline void *memcpy (REG void * restrict d, REG const void * restrict s t, size_t l)
{
        while (l--) *d++ = *s++;
}
#endif

#endif // __DHRY_DHRYSTONE_H
